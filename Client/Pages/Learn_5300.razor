@page "/learn_5300"

@inject Services.PostsService PostsService
@inject NavigationManager NavigationManager

@if (List == null)
{
	<div>
		Loading...
	</div>

	return;
}

<div class="row">
	<div class="col">
		<button type="button" class="btn btn-primary" @onclick="Create">Create</button>
	</div>
</div>

<hr />

<div class="row">
	<div class="col table-responsive">
		<table class="table table-bordered table-sm table-striped table-hover">
			<thead>
				<tr>
					<th>
						@(Resources.DataDictionary.RowNumber)
					</th>
					<th>
					</th>
					<th>
						@(Resources.DataDictionary.Title)
					</th>
					<th>
						@(Resources.DataDictionary.Body)
					</th>
				</tr>
			</thead>
			<tbody>
				@for (int index = 0; index <= List.Count - 1; index++)
				{
					var item = List[index];

					<tr>
						<td>
							@(index + 1)
						</td>
						<td>
							<button type="button" @onclick="() => Edit(item)">@(Resources.Buttons.Edit)</button>
						</td>
						<td>
							@if (string.IsNullOrWhiteSpace(value: item.Title) == false)
							{
								@((MarkupString)item.Title)
							}
						</td>
						<td>
							@if (string.IsNullOrWhiteSpace(value: item.Body) == false)
							{
								@((MarkupString)item.Body)
							}
						</td>
					</tr>
				}
			</tbody>
		</table>
	</div>
</div>

<hr />

@code
{
	protected override async Task OnInitializedAsync()
	{
		List =
			await
			PostsService.GetAsync();
	}

	private System.Collections.Generic.IList<ViewModels.PostViewModel>? List { get; set; }

	private void Create()
	{
		var uri =
			$"/posts/create_post_4";

		NavigationManager.NavigateTo(uri: uri, forceLoad: false);
	}

	private void Edit(ViewModels.PostViewModel post)
	{
		var uri =
			$"/posts/edit_post_1/{post.Id}";

		NavigationManager.NavigateTo(uri: uri, forceLoad: false);
	}
}
