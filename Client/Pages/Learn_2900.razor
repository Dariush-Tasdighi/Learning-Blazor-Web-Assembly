@page "/learn_2900"

<h1>
	Basket
</h1>

@if (Items is null)
{
	<div>
		Loading...
	</div>
}
else
{
	<div class="row">
		<div class="col table-responsive">

			<table class="table table-bordered table-striped table-hover">
				<thead>
					<tr>
						<th>
							@(Resources.DataDictionary.RowNumber)
						</th>
						<th>
							@(Resources.DataDictionary.Name)
						</th>
						<th>
							@(Resources.DataDictionary.Price)
						</th>
						<th>
							@(Resources.DataDictionary.Count)
						</th>
						<th>
						</th>
						<th>
							@(Resources.DataDictionary.SubTotal)
						</th>
					</tr>
				</thead>

				<tbody>
					@for (var index = 0; index <= Items.Count - 1; index++)
					{
						var item = Items[index];

						<tr>
							<td>
								@(index + 1)
							</td>
							<td>
								@(item.ProductName)
							</td>
							<td>
								@(item.ProductPrice)
							</td>
							<td>
								@(item.ProductCount)
							</td>
							<td>
								<button type="button" class="btn btn-primary btn-sm" @onclick="() => item.Plus()">+</button>
								<button type="button" class="btn btn-primary btn-sm" @onclick="() => item.Minus()">-</button>
							</td>
							<td>
								@(item.GetSubTotal())
							</td>
						</tr>
					}

					<tr>
						<td colspan="5">
						</td>
						<td>
							@(GetTotal())
						</td>
					</tr>
				</tbody>
			</table>

		</div>
	</div>
}

@code
{
	//protected override void OnInitialized()
	//{
	//	Items = new();

	//	for (var index = 1; index <= 5000; index++)
	//	{
	//		var item =
	//			new ViewModels.BasketItemViewModel
	//				{
	//					ProductCount = 1,
	//					ProductPrice = index * 100,
	//					ProductName = $"Product {index}",
	//				};

	//		Items.Add(item: item);
	//	}
	//}

	///// <summary>
	///// Warning
	///// </summary>
	//protected override async Task OnInitializedAsync()
	//{
	//	Items = new();

	//	for (var index = 1; index <= 5000; index++)
	//	{
	//		var item =
	//			new ViewModels.BasketItemViewModel
	//				{
	//					ProductCount = 1,
	//					ProductPrice = index * 100,
	//					ProductName = $"Product {index}",
	//				};

	//		Items.Add(item: item);
	//	}
	//}

	//protected override Task OnInitializedAsync()
	//{
	//	Items = new();

	//	for (var index = 1; index <= 5000; index++)
	//	{
	//		var item =
	//			new ViewModels.BasketItemViewModel
	//				{
	//					ProductCount = 1,
	//					ProductPrice = index * 100,
	//					ProductName = $"Product {index}",
	//				};

	//		Items.Add(item: item);
	//	}

	//	return Task.CompletedTask;
	//}

	//protected override async Task OnInitializedAsync()
	//{
	//	Items = new();

	//	for (var index = 1; index <= 5000; index++)
	//	{
	//		var item =
	//			new ViewModels.BasketItemViewModel
	//				{
	//					ProductCount = 1,
	//					ProductPrice = index * 100,
	//					ProductName = $"Product {index}",
	//				};

	//		Items.Add(item: item);
	//	}

	//	await Task.CompletedTask;
	//}

	//protected override async Task OnInitializedAsync()
	//{
	//	await System.Threading.Tasks.Task.Run(() =>
	//	{
	//		Items = new();

	//		for (var index = 1; index <= 5000; index++)
	//		{
	//			var item =
	//				new ViewModels.BasketItemViewModel
	//					{
	//						ProductCount = 1,
	//						ProductPrice = index * 100,
	//						ProductName = $"Product {index}",
	//					};

	//			Items.Add(item: item);
	//		}
	//	});
	//}

	/// <summary>
	/// Using 'Delay' instead of 5000 items!
	/// </summary>
	protected override async Task OnInitializedAsync()
	{
		// دستور ذیل درست کار نمی‌کند
		//System.Threading.Thread
		//	.Sleep(millisecondsTimeout: 5000);

		await Task.Delay
			(millisecondsDelay: 5000);

		Items = new();

		for (var index = 1; index <= 5; index++)
		{
			var item =
				new ViewModels.BasketItemViewModel
					{
						ProductCount = 1,
						ProductPrice = index * 100,
						ProductName = $"Product {index}",
					};

			Items.Add(item: item);
		}
	}

	private List<ViewModels.BasketItemViewModel>? Items { get; set; }

	private int GetTotal()
	{
		if (Items is null)
		{
			return 0;
		}

		int result =
			Items
			.Sum(current => current.GetSubTotal());

		return result;
	}
}
